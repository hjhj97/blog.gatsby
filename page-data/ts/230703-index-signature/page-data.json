{"componentChunkName":"component---src-templates-blog-post-js","path":"/ts/230703-index-signature/","result":{"data":{"site":{"siteMetadata":{"title":"JuHeon's Dev Blog"}},"markdownRemark":{"id":"e2e9ad53-09fb-5948-929b-6b90a16242d0","excerpt":"인덱스 시그니쳐 객체의 속성의 개수가 정해져 있지 않다면 인덱스 시그니쳐를 사용하는 게 좋다. 유니온타입 인터섹션 타입 타입 alias enum 숫자형 enum 문자형 enum const enum 기본적인 enum은 컴파일 시, 을 연결해주는 별도의 객체를 생성한다. 하지만 enum…","html":"<h2>인덱스 시그니쳐</h2>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">interface Phone {\n  [name: string]: string\n}\n\nconst phone: Phone = {\n  cpu: &quot;A15&quot;,\n  sim: &quot;eSIM&quot;,\n  brand : &quot;Apple&quot;,\n  ...\n}</code>\n        </deckgo-highlight-code>\n<p>객체의 속성의 개수가 정해져 있지 않다면 인덱스 시그니쳐를 사용하는 게 좋다.</p>\n<h2>유니온타입</h2>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">interface Phone {\n  cpu: string\n  sim: string\n}\ninterface Laptop {\n  cpu: string\n  gpu: string\n}\n\nfunction getDevice(device: Phone | Laptop) {\n  // device는 Phone과 Laptop 중 어떤 타입인지 정해져있지 않기 때문에\n  // 두 인터페이스가 공통으로 갖고 있는 속성만 접근 가능하다.\n\n  console.log(device.cpu) // ✅\n  console.log(device.sim) // ❌\n\n  // typeof나 in 연산자를 이용하여 타입을 필터링해주면 접근이 가능해진다.\n  if (&quot;sim&quot; in device) {\n    console.log(device.sim)\n  }\n  if (&quot;gpu&quot; in device) {\n    console.log(device.gpu)\n  }\n}</code>\n        </deckgo-highlight-code>\n<h2>인터섹션 타입</h2>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">interface Phone {\n  cpu: string\n  sim: string\n}\ninterface Laptop {\n  cpu: string\n  gpu: string\n}\n\nfunction getDevice(device: Phone &amp; Laptop) {\n  // device는 Phone과 Laptop 의 속성을 모두 만족시켜야 한다.\n  console.log(device.cpu) // ✅\n  console.log(device.sim) // ✅\n}\n\ngetDevice({ cpu: &quot;Intel&quot;, sim: &quot;eSIM&quot; }) // ❌, Laptop이 갖고 있는 속성도 만족시켜야함.</code>\n        </deckgo-highlight-code>\n<h2>타입 alias</h2>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">type Phone = {\n  cpu: string\n  sim: string\n}\nconst myPhone: Phone = {\n  cpu: &quot;A16&quot;,\n  sim: &quot;physical&quot;,\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">interface Phone {\n  cpu: string\n  sim: string\n}\ninterface Laptop {\n  cpu: string\n  gpu: string\n}\n// type은 연산자를 이용한 확장 가능\ntype Device = Phone | Laptop</code>\n        </deckgo-highlight-code>\n<h2>enum</h2>\n<h4>숫자형 enum</h4>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">enum Count {\n  ZERO,\n  ONE,\n  TWO,\n}\n// 별도로 값을 지정하지 않으면 0부터 1씩 증가하면서 값이 배정된다\nconsole.log(Count.ZERO) // 0\nconsole.log(Count.ONE) // 1\nconsole.log(Count.TWO) // 2</code>\n        </deckgo-highlight-code>\n<h4>문자형 enum</h4>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">enum Color {\n  PRIMARY = &quot;blue&quot;,\n  SECONDARY = &quot;white&quot;,\n}\nconsole.log(Color.PRIMARY) // blue\nconsole.log(Color.SECONDARY) // white</code>\n        </deckgo-highlight-code>\n<h4>const enum</h4>\n<p>기본적인 enum은 컴파일 시, <code class=\"language-text\">[속성이름]=값</code>을 연결해주는 별도의 객체를 생성한다.<br>\n하지만 enum 앞에 const를 붙이면 컴파일 시 객체를 생성하지 않고 <code class=\"language-text\">[속성이름]</code>을 직접 <code class=\"language-text\">값</code>으로 치환해버리기 때문에 컴파일 코드의 양을 줄일 수 있다.</p>\n<h2>제네릭</h2>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">function getValue&lt;T&gt;(value: T): T {\n  return value\n}\n// 파라미터에 어떤 타입을 넣느냐에 따라 value의 타입이 정해짐\nconsole.log(gatValue(10)) // number type\nconsole.log(gatValue(&quot;hello&quot;)) // string type</code>\n        </deckgo-highlight-code>\n<h4><code class=\"language-text\">T extends type</code></h4>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">function getValue&lt;T extends string&gt;(value: T) {\n  return value.length\n}\n// extends 키워드를 통해 제네릭으로 받을 타입을 제한할 수 있음\nconst num = getValue(10) // ❌\nconst str = getValue(&quot;hello&quot;) // ✅</code>\n        </deckgo-highlight-code>\n<h4><code class=\"language-text\">T extends keyof type</code></h4>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">interface Phone {\n  cpu: string\n  sim: string\n}\ntype PhoneType = keyof Phone // &quot;cpu&quot; | &quot;sim&quot;\n\nfunction getPhoneComponent&lt;T extends keyof Phone&gt;(component: T) {\n  return component\n}\nconst component1 = getPhoneComponent(&quot;cpu&quot;) //  ✅\nconst component2 = getPhoneComponent(&quot;gpu&quot;) // ❌</code>\n        </deckgo-highlight-code>\n<h2>Non-null assertion</h2>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">const elem = document.querySelector(&quot;.elem&quot;)\n// elem : HTMLElement | null\nelem.textContent = &quot;Hello&quot; // ❌, elem is possibly null;\nelem!.textContent = &quot;Hello&quot; // ✅</code>\n        </deckgo-highlight-code>\n<h2>유틸리티 타입</h2>\n<h4>Pick</h4>\n<p>특정 타입만 골라내서 새로운 타입을 만듦</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">interface Phone {\n  cpu: string\n  ram: string\n  sim: string\n}\ntype Cpu = Pick&lt;Phone, &quot;cpu&quot;&gt;\nconst myPhone: Cpu = {\n  cpu: &quot;A15&quot;,\n}</code>\n        </deckgo-highlight-code>\n<h4>Omit</h4>\n<p>특정 타입만 제외해서 새로운 타입을 만듦</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">interface Phone {\n  cpu: string\n  ram: string\n  sim: string\n}\ntype withoutCpu = Omit&lt;Phone, &quot;cpu&quot;&gt;\nconst myPhone: withoutCpu = {\n  ram: &quot;8GB&quot;,\n  sim: &quot;physical&quot;,\n}</code>\n        </deckgo-highlight-code>\n<h4>Partial</h4>\n<p>모든 타입을 옵셔널 파라미터로 바꿔서 새로운 타입으로 만듦</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">interface Phone {\n  cpu: string\n  ram: string\n  sim: string\n}\ntype PartialPhone = Partial&lt;Phone&gt;\n/*\n  PartialPhone = {\n    cpu?:string\n    ram?:string\n    sim?:string\n  }\n*/\nconst myPhone: PartialPhone = {\n  ram: &quot;8GB&quot;,\n}\nconst yourPhone: PartialPhone = {\n  cpu: &quot;A16&quot;,\n  ram: &quot;8GB&quot;,\n}</code>\n        </deckgo-highlight-code>\n<h4>Exclude</h4>\n<p>유니온 타입에서 특정 타입을 제외하여 새로운 타입으로 만듦</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">type PhoneBrands = &quot;Samsung&quot; | &quot;Apple&quot; | &quot;LG&quot;\ntype WithoutApple = Exclude&lt;PhoneBrands, &quot;Apple&quot;&gt; // &#39;Samsung&#39; | &#39;LG&#39;</code>\n        </deckgo-highlight-code>\n<h4>Record</h4>\n<p>key-value 값 형태의 객체 타입을 만들어줌</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">type PhoneBrands = &quot;Samsung&quot; | &quot;Apple&quot; | &quot;LG&quot;\ninterface Phone {\n  cpu: string\n  ram: string\n  sim: string\n}\ntype PhoneComponent = Record&lt;PhoneBrands, Phone&gt;\n/*\n type PhoneComponent = {\n  Samsung: Phone\n  Apple: Phone\n  LG: Phone\n}\n*/</code>\n        </deckgo-highlight-code>\n<h2>맵드 타입</h2>\n<p>이미 정의된 타입을 가지고 새로운 타입을 만들어줌</p>\n<h4>in</h4>\n<p>유니온타입의 원소를 하나씩 순회하면서 string 형태로 뽑아줌</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">type PhoneBrands = &quot;Samsung&quot; | &quot;Apple&quot; | &quot;LG&quot;\ntype Phone = {\n  [brand in PhoneBrands]: string\n}\n/*\ntype Phone = {\n    Samsung: string;\n    Apple: string;\n    LG: string;\n}\n*/</code>\n        </deckgo-highlight-code>\n<h4>in keyof</h4>\n<p>객체의 각 속성을 하나씩 순회하면서 string 형태로 뽑아줌</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">interface Phone {\n  cpu: string\n  ram: string\n  sim: string\n}\ntype PhoneIncluded = {\n  [phone in keyof Phone]: boolean\n}\n/*\ntype PhoneIncluded = {\n    cpu: boolean;\n    ram: boolean;\n    sim: boolean;\n}\n*/</code>\n        </deckgo-highlight-code>\n<h2>Reference</h2>\n<p><a href=\"https://www.yes24.com/Product/Goods/119410497\">쉽게 시작하는 타입스크립트(장기효)</a></p>","frontmatter":{"title":"TS 개념 정리","date":"2023-07-05","description":null,"category":"TS"}},"previous":{"fields":{"slug":"/vue/230704-start-pinia/"},"frontmatter":{"title":"pinia 소개 및 도입 후기"}},"next":{"fields":{"slug":"/230712-second-project-review/"},"frontmatter":{"title":"두 번째 프로젝트 회고"}}},"pageContext":{"id":"e2e9ad53-09fb-5948-929b-6b90a16242d0","previousPostId":"b124e90c-fb57-5bfc-9420-afa6aa4f648c","nextPostId":"8762d7c8-0077-5d2a-a6e4-5ca3402ebbd9"}},"staticQueryHashes":["2841359383","3821306223"],"slicesMap":{}}