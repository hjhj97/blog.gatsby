{"componentChunkName":"component---src-templates-blog-post-js","path":"/vue/230629-vue-router-state/","result":{"data":{"site":{"siteMetadata":{"title":"JuHeon's Dev Blog"}},"markdownRemark":{"id":"20c40df6-8265-5029-848d-0d48661ab441","excerpt":"2023-04-24에 작성된 원문을 수정한 버전입니다 페이지에 state를 전달하는 방법 react에서는 페이지 이동 시 state를 전달하기 위해서는 에서  컴포넌트 또는  훅을 통해 전달이 가능하다. 반면에 vue…","html":"<p><em>2023-04-24에 작성된 <a href=\"https://ps-hjhj97.tistory.com/227\">원문</a>을 수정한 버전입니다</em></p>\n<h2>페이지에 state를 전달하는 방법</h2>\n<p>react에서는 페이지 이동 시 state를 전달하기 위해서는 <code class=\"language-text\">react-router-dom</code>에서 <code class=\"language-text\">&lt;Link></code> 컴포넌트 또는 <code class=\"language-text\">useNaviate()</code> 훅을 통해 전달이 가능하다.<br>\n반면에 vue에서는 직접적인 전달 방법이 존재하지 않아 개발자 자체적으로 방법을 찾아야 했다. 생각해볼 수 있는 방법으로는</p>\n<ol>\n<li><code class=\"language-text\">vuex</code>와 같은 전역상태 저장소에 넣어두고 꺼내쓰기<br>\n=> 일회용 데이터를 위해서 전역상태에 임시 데이터를 넣고 싶지는 않았다.</li>\n<li><code class=\"language-text\">router.push()</code>를 하는 코드 직후에 <code class=\"language-text\">window.pushState(state)</code>를 추가해서 페이지가 이동되면 꺼내쓴다<br>\n=> 그나마 현실적인 방법이다. 다만 history를 두번으로 push하기 때문에 똑같은 페이지가 히스토리에 스택에 두번 들어가게 된다.</li>\n<li>이동하려는 URL에 쿼리스트링으로 데이터 값을 담아서 전달 하기<br>\n=> URL이 괜히 길어지는데다가, 보안상 민감한 데이터는 쿼리스트링에 담기 조심스럽다.</li>\n</ol>\n<h2>해결방법</h2>\n<p>이런 불편함 때문인지 vue git의 rfc에도 글이 몇 개 올라와 있었고, 드디어 2022년 7월에 <code class=\"language-text\">vue-router@4.1.0</code>버전에서 정식 기능으로 추가되었다(<a href=\"https://github.com/vuejs/router/releases/tag/v4.1.0\">링크</a>).</p>\n<p>방법은 간단하다. router에 params를 넣는 방식처럼 state도 객체 형태로 적어주기만 하면 된다.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">router.push({name &#39;NextPage&#39;, state : { isDetailsOpen : true }})</code>\n        </deckgo-highlight-code>\n<br />\n<p>다만 꺼낼 때는 <code class=\"language-text\">state</code>값을 <code class=\"language-text\">useRoute()</code>에서 뽑아내는 게 아니라, <code class=\"language-text\">windiw.history.state</code>에서 직접 꺼내야한다.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">const { isDetailsOpen } = window.history?.state || false</code>\n        </deckgo-highlight-code>\n<p>사실 정식기능으로 추가되었다고는 하더라도 <code class=\"language-text\">window.history</code>객체의 state 힘을 빌리는 정도에 불과하기 때문에 위에서 언급한 임시 해결방법 2번과 거의 유사하다고 볼 수 있다. 또한 이 방법을 사용한다고 하더라도 보안에 민감한 데이터를 전달하기엔 역시나 찝찝한 구석이 있다. 그냥 다음 페이지에의 상태(모달 오픈 여부 등)만 전달하는 데 사용할 수 있을 것 같다.</p>","frontmatter":{"title":"vue-router를 통한 페이지간 state 전달","date":"2023-06-29","description":"vue에서 state전달은 어떻게 할까?"}},"previous":{"fields":{"slug":"/vue/230628-router-view-find-dom/"},"frontmatter":{"title":"router-view 에서 DOM을 찾지 못하는 문제"}},"next":{"fields":{"slug":"/vue/230630-vue-named-route/"},"frontmatter":{"title":"react에는 named-route 없나요?(Feat. vue에는 있는데..)"}}},"pageContext":{"id":"20c40df6-8265-5029-848d-0d48661ab441","previousPostId":"bf102f9b-cad5-5dd1-94fa-b407aa4b7b42","nextPostId":"feb10932-351b-5e77-ad03-cd875f2263d2"}},"staticQueryHashes":["2841359383","3821306223"],"slicesMap":{}}