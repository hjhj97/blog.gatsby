{"componentChunkName":"component---src-templates-blog-post-js","path":"/vue/250106-vue-korean-input/","result":{"data":{"site":{"siteMetadata":{"title":"하주헌 개발 블로그"}},"markdownRemark":{"id":"40279e45-80d1-5c1f-afb2-63c3a437c673","excerpt":"…","html":"<h2>문제의 원인</h2>\n<p>한글은 영어와 같은 언어와 달리 조합형 언어이기 때문에 글자를 입력할 때 조합이 완성되기 전까지는 글자가 화면에 표시되지 않는다. 이러한 특성 때문에 한글 입력 시 몇 가지 이슈가 존재한다.</p>\n<p>예를 들어 사용자가 <code class=\"language-text\">안전</code> 이라는 글자를 입력하려는 상황을 가정해보자.<br>\n사용자는 키보드로 <code class=\"language-text\">'ㅇ'</code> - <code class=\"language-text\">'ㅏ'</code> - <code class=\"language-text\">'ㄴ'</code> - <code class=\"language-text\">'ㅈ'</code> - <code class=\"language-text\">'ㅓ'</code> - <code class=\"language-text\">'ㄴ'</code> 순으로 총 6번을 입력할 것이다. 설명상 편의를 위해 <code class=\"language-text\">'ㅇ'(1)</code> - <code class=\"language-text\">'ㅏ'(2)</code> - <code class=\"language-text\">'ㄴ'(3)</code> - <code class=\"language-text\">'ㅈ'(4)</code> - <code class=\"language-text\">'ㅓ'(5)</code> - <code class=\"language-text\">'ㄴ'(6)</code> 으로 인덱싱을 매겨보자.</p>\n<p>컴퓨터 입장에서는 2번째 입력까지는 <code class=\"language-text\">아</code> 라는 글자 조합이 완성된 상태이다. 여기서 3번째 <code class=\"language-text\">ㄴ</code>이 들어왔을 때 <code class=\"language-text\">ㄴ</code>을 현재 글자(<code class=\"language-text\">아</code>)의 받침(종성)으로 간주할 것인지, 다음 글자의 초성으로 간주할 것인지 알 수 없다는 문제가 생긴다. 이 때문에 우선 임시로 <code class=\"language-text\">ㄴ</code>을 받침으로 넣어두고(<code class=\"language-text\">안</code>), 4번째 글자의 입력에 따라 어떻게 처리할지 결정하게 된다.</p>\n<p>4번째 글자는 <code class=\"language-text\">ㅈ</code>이다. 이로써 3번째 글자인 <code class=\"language-text\">ㄴ</code>은 받침으로 처리하는 것은 확정되었다. 만약 <code class=\"language-text\">ㅈ</code>이 아닌 모음이 입력되었다면 <code class=\"language-text\">안</code>에서 <code class=\"language-text\">ㄴ</code>은 받침이 아닌, 다음 글자의 초성으로 처리될 것이다.<br>\n하지만 여전히 <code class=\"language-text\">ㅈ</code>은 <code class=\"language-text\">ㄴ</code>과 결합하여 <code class=\"language-text\">ㄵ</code> 이라는 받침으로 처리될 여지가 있다. 따라서 4번째 입력까지도 <code class=\"language-text\">앉</code>일지, <code class=\"language-text\">안ㅈ</code>일지 알 수 없는 상태이며 5번째 글자의 종류에 의존적이게 된다. 자음이 온다면 <code class=\"language-text\">앉</code>으로, 모음이 온다면 <code class=\"language-text\">안ㅈ</code>로 처리될 것이다.</p>\n<p>5번째 입력으로 모음인 <code class=\"language-text\">ㅓ</code>을 받음으로써 비로소 4번째 글자<code class=\"language-text\">ㅈ</code>은 첫 글자의 <code class=\"language-text\">ㄵ</code> 받침이 아닌 다음 글자의 초성(<code class=\"language-text\">안저</code>)으로서 처리될 수 있는 것이다.</p>\n<p>이처럼 <strong><em>한글은 입력 당시에는 글자의 조합을 확신할 수 없으며, 뒤따르는 글자 입력에 의존적</em></strong> 이라는 특성을 지니고 있다. 키보드에 있는 자판의 수보다 입력해야하는 글자의 종류가 많은 경우에 이러한 문제가 발생하게 되며, 이를 해결하기 위한 방법을 <a href=\"https://ko.wikipedia.org/wiki/%EC%9E%85%EB%A0%A5%EA%B8%B0\">IME(Input Method Editor)</a> 라고 한다.</p>\n<h2>이로 인한 현상</h2>\n<p>IME 문제로 인하여 Vue(자바스크립트)에서는 아래와 같은 2가지 상황이 발생하게 된다.</p>\n<h3>1. 글자의 조합이 완성되기 전까지 JS에 반영되지 않음</h3>\n<p>Vue에서 제공하는 양방향 바인딩 디렉티브 <code class=\"language-text\">v-model</code>을 사용할 때 문제가 발생한다.<br>\n위에서 살펴본 사례처럼 4번째 입력(<code class=\"language-text\">ㅈ</code>)까지도 조합을 확신할 수 없다. 이처럼 <code class=\"language-text\">v-model</code>에서는 조합을 확신할 수 없는 상태에서는 글자를 반영하지 않으며, 5번째 입력이 들어와 첫 글자가 확정되는 순간에야 비로소 글자를 반영하게 된다.</p>\n<p><img src=\"https://github.com/user-attachments/assets/2babad70-e2ce-4464-9f46-5b6855f2bd19\" alt=\"vmodel\"></p>\n<p>위 영상에서 보다시피 <code class=\"language-text\">앉</code> 을 입력할 때까지도 글자의 조합을 확신할 수 없는 상태이기 때문에 데이터가 화면에 반영되지 않는다. 5번째 글자인 <code class=\"language-text\">ㅓ</code> 입력되는 순간에 비로소 화면에 반영된다.</p>\n<h3>2. <code class=\"language-text\">maxlength</code> 속성에서 마지막 글자가 넘침</h3>\n<p>2번째 현상은 현재 입력 중인 글자(=조합이 확정되지 않는 글자)는 <code class=\"language-text\">length</code> 로 카운트하지 않는다는 것이다. 때문에 <code class=\"language-text\">input</code> 태그에서 <code class=\"language-text\">maxlength</code> 값을 설정해놓으면 마지막 한 글자가 넘쳐 보이는 현상이 발생한다. 해당 <code class=\"language-text\">input</code>의 <code class=\"language-text\">focus</code> 가 해제되면 정상적으로 돌아오지만 사용자 입장에서는 버그라고 느낄 여지가 있다.</p>\n<p><img src=\"https://github.com/user-attachments/assets/d9ad8b41-fb62-4469-a1bd-0f278b6d13f4\" alt=\"vmodel2\"></p>\n<p>위 영상에서 <code class=\"language-text\">input</code> 태그에 <code class=\"language-text\">maxlength=2</code> 속성을 설정해놓았다. 따라서 정확히 2글자만 입력되기를 기대하지만 실제로는 3글자가 입력되는 것처럼 보이고 있다.</p>\n<p>이 현상의 원인이 IME 의 영향도 있지만, 구글링을 해보니 유니코드로 인한 문제일 수도 있자는 <a href=\"https://mygumi.tistory.com/398\">블로그 포스팅</a>을 찾을 수 있었다. 알파벳과 같은 영어 문자는 유니코드상에서 1바이트로 처리되지만, 한글과 같은 복합 문자는 2바이트로 처리되기 때문에 이러한 현상이 발생하는 것으로 보인다.</p>\n<h2>해결방법</h2>\n<p>위 2가지 문제를 해결하기 위해서는 <code class=\"language-text\">v-model</code> 디렉티브를 사용하지 않고 직접 이벤트를 받아 처리해야만 한다. 이는 내가 예전에 작성한 <a href=\"https://juheon.dev/vue/230701-vmodel-and-custom-component-1/\">포스팅</a>에서 다룬 적이 있다. 당시에는 <code class=\"language-text\">modelValue</code>를 <code class=\"language-text\">props</code>로 받고, <code class=\"language-text\">update:modelValue</code>를 <code class=\"language-text\">emit</code> 하는 방식으로 처리했었다.<br>\n이 방법도 여전히 유효하지만 이번에는 <code class=\"language-text\">Vue</code> 의 <code class=\"language-text\">3.4</code> 버전부터 제공되는 <code class=\"language-text\">defineModel</code> 을 사용하여 해결해보자.</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const model = defineModel&lt;string&gt;({ default: &quot;&quot; })</code>\n        </deckgo-highlight-code>\n<p><a href=\"https://ko.vuejs.org/api/sfc-script-setup.html#definemodel\">공식문서</a>의 설명에 따르면 \"<code class=\"language-text\">v-model</code> 을 통해 사용될 수 있는 양방향 바인딩 <code class=\"language-text\">prop</code>을 선언하는 데 사용될 수 있습니다. 내부적으로, 이 매크로는 모델 <code class=\"language-text\">prop</code>과 해당하는 값 업데이트 이벤트를 선언합니다.\" 라고 한다.<br>\n즉 번거롭게 <code class=\"language-text\">prop</code>과 <code class=\"language-text\">emit</code>을 선언할 필요 없이, <code class=\"language-text\">model</code> 변수를 직접 조작하면 부모 컴포넌트에서 내려온 <code class=\"language-text\">v-model</code> 이 자동으로 반영된다는 것이다.</p>\n<details>\n<summary>\n  소스 코드\n</summary>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">// Parent.vue\n&lt;script setup lang=&quot;ts&quot;&gt;\nconst MAX_LENGTH = 2;\nconst msg = ref(&quot;&quot;)\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;MyInput v-model=&quot;msg&quot; /&gt;\n  &lt;p&gt;{{msg.length}} / {{MAX_LENGTH}}&lt;/p&gt;\n  &lt;h1&gt;{{msg}}&lt;/h1&gt;\n&lt;/template&gt;</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">// MyInput.vue\n&lt;script setup lang=&quot;ts&quot;&gt;\nconst model = defineModel&lt;string&gt;({default : &quot;&quot;})\nconst handleInput = (e : Event) =&gt; {\n    const newValue = e.target!.value\n    model.value = newValue;\n}\nconst handleSubmit = () =&gt; {\n    alert(model.value)\n}\n&lt;/script&gt;\n\n&lt;template&gt;\n    &lt;form @submit.prevent=handleSubmit&gt;\n        &lt;input :value=&quot;model&quot; @input=&quot;handleInput($event)&quot; /&gt;\n        &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/template&gt;</code>\n        </deckgo-highlight-code>\n</details>\n<br />\n<p>이렇게 하면 첫 번째 문제는 해결되었지만 두 번째 문제였던 <code class=\"language-text\">maxlength</code> 속성에서 마지막 글자가 넘침 현상은 여전히 발생한다. 이를 해결하기 위해선 <code class=\"language-text\">watch</code>를 사용하여 <code class=\"language-text\">model</code> 문자열의 길이를 체크하고, 제한 길이를 초과할 경우 <code class=\"language-text\">substring</code> 함수를 사용하여 자르면 된다.</p>\n<p><img src=\"https://github.com/user-attachments/assets/ce934d25-cc0b-4f07-bde5-506e338f1bb3\" alt=\"custom2\"></p>\n<details>\n<summary>\n  소스 코드\n</summary>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">// MyInput.vue\n&lt;script setup lang=&quot;ts&quot;&gt;\nconst model = defineModel&lt;string&gt;({default : &quot;&quot;})\nconst attrs = useAttrs();\nconst MAX_LENGTH = Number(attrs.maxlength ?? Infinity)\n\nconst handleInput = (e : Event) =&gt; {\n    const newValue = e.target!.value\n    model.value = newValue;\n}\nconst handleSubmit = () =&gt; {\n    alert(model.value)\n}\nwatch(model, ()=&gt;{\n  if(!model.value)  return;\n  if(model.value.length &gt; MAX_LENGTH){\n    model.value = model.value.substring(0,MAX_LENGTH)\n  }\n})\n&lt;/script&gt;\n\n&lt;template&gt;\n    &lt;form @submit.prevent=handleSubmit&gt;\n        &lt;input :value=&quot;model&quot; @input=&quot;handleInput($event)&quot; :maxlength=&quot;MAX_LENGTH&quot; /&gt;\n        &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/template&gt;</code>\n        </deckgo-highlight-code>\n</details>\n<h3>Demo</h3>\n<iframe src=\"https://play.vuejs.org/#eNqdVG1r20AM/ivqMagDib23T5njtuvC1rF2Yy1jHwzDSc6JO/ts7iVNMf7v0+ns5AKjlPqTT3p0zyOdpJZdNE24NZxNWayWsmg0KK5NA2Um1rOUaZWyJBVF1dRSw/XjlWiMhlzWFZyGUX+2F5zuQS1InkPXg5wrFctaKLzg4vefb/Obz3dfYAZvPwzmSq3xjGFBylI2svg4cnKQHA+aV02ZaU4ngPhkMoF4VWzxDPjFmzfJJ55nptSwnVT1ipdxhLbeW5Do3oFJIV3KYFplu5KLtd6g6SAMPREFxpElgMmETmQ5Zrw0SmOK8y0X2qcbqvQywoGMLE3SthgcurCugwja9hDadXHUuFikJ6g19VJsEb3CsTG+JtY7L9bhvaoFPnlLMLasq6Youfze6ALfI2VTII/1ZWVZP3wlm5aGjwf7csOXf/9jv1c7a0vZD8kVl1uesr1PZ3LNtXPPb2/4Dv/3TqyVKRH9hPMnV3VprEYH+2jECmV7OFJ7RX1YiPWdmu80F2pIygq1yI7wKcPevHwi9YPcd+F7iktFh1X0uv55Y9OCUfxCa6nG8JDp5eZoOnAK9nNg+wUnYcXzQvBr6mOlJaaSBC0aqcFt5inrcEpcUGYvxqCBIxjt5+po3G5MteAyIHi4b0U4O4Mr7AlR6EcaPBe5yWxpXR/PIODISn0+glkyVMghBX/4lZWGI4yHrmQn4dZaHIpycgaEDGiUiNU8Zrs1i6ogOp8lw9fRgXcLqqRQqqRzjDFkllBAkQcnPhhwrWgjBRKS0/P1UwWJV6dRz3qs2g9SZuGeJHg99uKG/qAaHq0vf3nRfshrWcE53oPZho3ktq4zvwQ90NtdU+K2m8QqwY1xTnY0eA8VvKKrRs9YNf3lC6N1LUA/NvZupwgb16mII+ceZEdWt83nsFRY9w9AthMl\" style=\"width:100%; height:800px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://ko.vuejs.org/api/sfc-script-setup.html#definemodel\">https://ko.vuejs.org/api/sfc-script-setup.html#definemodel</a></li>\n<li><a href=\"https://mygumi.tistory.com/398\">https://mygumi.tistory.com/398</a></li>\n</ul>","frontmatter":{"title":"Vue에서 한글을 입력할 때 생기는 2가지 이슈","date":"2025-01-06","keywords":"Vue,한글,IME","description":"IME로 인한 이슈와 해결 방안","category":"Vue"}},"previous":{"fields":{"slug":"/essay/241221-small-ux/"},"frontmatter":{"title":"소소하지만 확실한 UX"}},"next":{"fields":{"slug":"/js_ts/250114-fingerprintjs-deepdive/"},"frontmatter":{"title":"fingerprint.js에 대해 알아보자"}}},"pageContext":{"id":"40279e45-80d1-5c1f-afb2-63c3a437c673","previousPostId":"a9c59211-eec2-55c3-bdf7-1046b09cb558","nextPostId":"352e7161-09ff-5089-92e5-49e6036fa460"}},"staticQueryHashes":["2841359383","3821306223"],"slicesMap":{}}