{"componentChunkName":"component---src-templates-blog-post-js","path":"/vue/230628-router-view-find-dom/","result":{"data":{"site":{"siteMetadata":{"title":"하주헌 개발 블로그"}},"markdownRemark":{"id":"bf102f9b-cad5-5dd1-94fa-b407aa4b7b42","excerpt":"2023-04-04에 작성된 원문을 수정한 버전입니다 router-view안에 있는 DOM은 왜 못 찾지? vue로 프론트엔드 개발을 하던 도중,  에서 안에 들어있는 특정 DOM에 접근해야 할 일이 생겼다(정확히 말하자면 태그에 특정 class…","html":"<p><em>2023-04-04에 작성된 <a href=\"https://ps-hjhj97.tistory.com/225\">원문</a>을 수정한 버전입니다</em></p>\n<h2>router-view안에 있는 DOM은 왜 못 찾지?</h2>\n<p>vue로 프론트엔드 개발을 하던 도중, <code class=\"language-text\">App.vue</code> 에서 <code class=\"language-text\">router-view</code>안에 들어있는 특정 DOM에 접근해야 할 일이 생겼다(정확히 말하자면 태그에 특정 class가 존재 유무를 확인해야 했다).<br>\n따라서 <code class=\"language-text\">document.querySelector('.특정클래스')</code>함수를 호출하여 해당 DOM에 접근하려고 시도했는데 결과는 예상과 달리 <code class=\"language-text\">null</code>로 반환되었다. (파일 구조는 아래와 같이 구성되어있다.)</p>\n<h4>NavBar.vue</h4>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">&lt;template&gt;\n  &lt;nav&gt;\n    &lt;router-link :to=&quot;{ name: &#39;Home&#39; }&quot;&gt;Home&lt;/router-link&gt;\n  &lt;/nav&gt;\n&lt;/template&gt;</code>\n        </deckgo-highlight-code>\n<h4>Home.vue</h4>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">&lt;template&gt;\n  &lt;h1 class=&quot;home&quot;&gt;This is home&lt;/h1&gt;\n&lt;/template&gt;</code>\n        </deckgo-highlight-code>\n<h4>App.vue</h4>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">&lt;template&gt;\n  &lt;NavBar /&gt;\n  &lt;router-view /&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n...\nexport default {\n  components: { NavBar },\n  setup() {\n    onMounted(async () =&gt; {\n      const homeEl = document.querySelector(&quot;.home&quot;);\n      const navEl = document.querySelector(&quot;nav&quot;);\n\n      console.log(homeEl); // not found\n      console.log(navEl); // found\n    });\n  },\n};\n&lt;/script&gt;\n\n</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">router-view</code>내부에 있는 DOM요소('home' 클래스)에 접근하는 건데 왜 못 찾는 걸까? 혹시나 하는 마음에 똑같이 글로벌 범위로 사용되는 <code class=\"language-text\">&lt;nav></code>를 찾아보았을 때는 잘 찾고 있었다.</p>\n<p>내 경험상 vue에서 특정 DOM을 찾지 못하는 문제에 부딪혔을 때는 일단 <code class=\"language-text\">setTimeout</code>으로 딜레이를 걸어서 찾으면 해결되는 경우가 많았다. 그래서 일단 아래와 같이 코드를 수정해보았다.</p>\n<h4>App.vue</h4>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">&lt;script&gt;\nexport default {\n  setup() {\n    onMounted(() =&gt; {\n      setTimeout(()=&gt;{\n        const homeEl = document.querySelector(&quot;.home&quot;);\n        const navEl = document.querySelector(&quot;nav&quot;);\n\n        console.log(homeEl); // found\n        console.log(navEl); // found\n      },1000)\n    });\n  },\n};\n&lt;/script&gt;\n</code>\n        </deckgo-highlight-code>\n<p>아니나 다를까, 시간을 두고 DOM을 찾았더니 성공하였다. 우선 가장 무식한(비효율적인) 방법으로는 문제를 해결하기는 했다.</p>\n<p>문제의 원인은 <code class=\"language-text\">router-view</code>가 <strong>mount 될 때까지 미세하게나마 시간이 소요되기 때문</strong>이었다.<br>\n따라서 <code class=\"language-text\">App.vue</code>에서 <code class=\"language-text\">onMounted()</code>가 호출되는 시점에는 <code class=\"language-text\">router-view</code> 의 <code class=\"language-text\">Home.vue</code> 는 아직 mount되기 이전이었기 때문에 DOM에 접근할 수 없었던 것이다. 그에 반해 <code class=\"language-text\">&lt;nav></code>는 <code class=\"language-text\">router-view</code> 내부에 있지 않고 <code class=\"language-text\">App.vue</code>에 독립적으로 존재하기 때문에 mount되는 시간이 훨씬 짧아 접근이 가능하다.</p>\n<h2>해결책은 router.isReady()</h2>\n<p>개발할 때는 워낙 빠릿하게 작동해서 눈치채기는 어렵지만 사실 router가 mount되기까지의 딜레이는 결코 무시할 수 없는 수준으로 꽤 긴 시간이다. 그렇다면 앞으로도 계속 <code class=\"language-text\">setTimeout</code>으로 강제 딜레이를 넣어줘야 하는 걸까? 당연히 아니다.<code class=\"language-text\">vue-router</code>에서는 이런 문제가 발생할 줄 알고 미리 <code class=\"language-text\">router.isReady()</code>라는 비동기 함수를 만들어 놓았다.<a href=\"https://router.vuejs.org/guide/migration/#replaced-onready-with-isready\">공식문서</a></p>\n<p>문제를 해결한 코드를 먼저 보자.</p>\n<h4>App.vue</h4>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">export default {\n  components: { NavBar },\n  setup() {\n    onMounted(async () =&gt; {\n      await router.isReady() // Added!\n      const homeEl = document.querySelector(&quot;.home&quot;)\n      const navEl = document.querySelector(&quot;nav&quot;)\n\n      console.log(homeEl) // found\n      console.log(navEl) // found\n    })\n  },\n}</code>\n        </deckgo-highlight-code>\n<br />\n<p>코드는 <code class=\"language-text\">querySelector</code>로 찾기 전에 <code class=\"language-text\">await router.isReady()</code> 딱 한 줄만 추가했다.</p>\n<p>이 함수는 쉽게 얘기하면 <code class=\"language-text\">router-view</code> 내부의 파일들이 DOM으로 mount 될 때 까지 기다려주는 역할이다. 모두 mount가 완료되었다면 resolve 해줌으로써 <code class=\"language-text\">querySelector</code>로 접근할 수 있게 된다.</p>\n<h2>구현</h2>\n<iframe src=\"https://codesandbox.io/embed/vue-router-isready-tlqd83?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"vue-router-isReady\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>","frontmatter":{"title":"router-view 에서 DOM을 찾지 못하는 문제","date":"2023-06-28","keywords":null,"description":null,"category":"Vue"}},"previous":{"fields":{"slug":"/vue/230627-vue-async-data/"},"frontmatter":{"title":"vue-chart에서 비동기 통신 후 화면에 반영하기"}},"next":{"fields":{"slug":"/vue/230629-vue-router-state/"},"frontmatter":{"title":"vue-router를 통한 페이지간 state 전달"}}},"pageContext":{"id":"bf102f9b-cad5-5dd1-94fa-b407aa4b7b42","previousPostId":"e4ac637f-ae01-51f1-9954-817f6580ddfd","nextPostId":"20c40df6-8265-5029-848d-0d48661ab441"}},"staticQueryHashes":["2841359383","3821306223"],"slicesMap":{}}